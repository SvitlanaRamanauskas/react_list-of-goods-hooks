{"version":3,"sources":["App.tsx","Components/Good/Good.tsx","Components/GoodList/GoodList.tsx","index.tsx"],"names":["SortType","Good","good","GoodList","goods","map","goodsFromServer","App","useState","sortCondition","setSortCondition","reverseCondition","setReverseCondition","visibleGoods","preparedGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0DCbQC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,oBAAI,UAAQ,OAAZ,SAAoBA,KCDXC,EAAoC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClD,OACE,6BACGA,EAAMC,KAAI,SAAAH,GAAI,OACb,cAAC,EAAD,CAAMA,KAAMA,GAAWA,SFLlBI,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGN,K,oBAAAA,E,iBAAAA,M,KAoCE,IAAMO,EAAgB,WAC3B,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAEMC,EA9BR,SACET,EADF,GAGG,IADCK,EACF,EADEA,cAAeE,EACjB,EADiBA,iBAEXG,EAAa,YAAOV,GAmB1B,OAjBIK,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKT,EAASkB,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKjB,EAASoB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAC9B,QACE,OAAO,MAKXT,GACFG,EAAcO,UAGTP,EAOcQ,CACnBhB,EAAiB,CAAEG,gBAAeE,qBAGpC,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMf,EAAiBV,EAASkB,WACzCK,UAAS,yBAAoBd,IAAkBT,EAASkB,SAAW,GAAK,YAH1E,iCAQA,wBACEM,KAAK,SACLC,QAAS,kBAAMf,EAAiBV,EAASoB,SACzCG,UAAS,4BAAuBd,IAAkBT,EAASoB,OAAS,GAAK,YAH3E,4BAQA,wBACEI,KAAK,SACLC,QAAS,kBAAMb,GAAqBD,IACpCY,UAAS,6BAA4C,IAArBZ,EAA4B,GAAK,YAHnE,sBAQEF,GAAiBE,IACjB,wBACEa,KAAK,SACLC,QAAS,WACPf,EAAiB,IACjBE,GAAoB,IAEtBW,UAAU,4BANZ,sBAaJ,cAAC,EAAD,CAAUnB,MAAOS,QGrGvBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.508c1275.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodType } from './Types/GoodType';\nimport { GoodList } from './Components/GoodList/GoodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabet = 'alphabet',\n  length = 'length',\n}\n\nexport interface ActionParams {\n  sortCondition: string,\n  reverseCondition: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: GoodType[],\n  { sortCondition, reverseCondition }: ActionParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortCondition) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortCondition) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n        case SortType.length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseCondition) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortCondition, setSortCondition] = useState('');\n  const [reverseCondition, setReverseCondition] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortCondition, reverseCondition },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortCondition(SortType.alphabet)}\n          className={`button is-info ${sortCondition === SortType.alphabet ? '' : 'is-light'}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortCondition(SortType.length)}\n          className={`button is-success ${sortCondition === SortType.length ? '' : 'is-light'}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReverseCondition(!reverseCondition)}\n          className={`button is-warning ${reverseCondition === true ? '' : 'is-light'}`}\n        >\n          Reverse\n        </button>\n\n        {(sortCondition || reverseCondition) && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              setSortCondition('');\n              setReverseCondition(false);\n            }}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList goods={visibleGoods} />\n\n    </div>\n  );\n};\n","import { GoodType } from '../../Types/GoodType';\n\nexport type PropsGood = {\n  good: GoodType;\n};\n\nexport const Good: React.FC<PropsGood> = ({ good }) => {\n  return (\n    <li data-cy=\"Good\">{good}</li>\n  );\n};\n","import { GoodType } from '../../Types/GoodType';\nimport { Good } from '../Good/Good';\n\nexport type PropsGoodList = {\n  goods: GoodType[];\n};\n\nexport const GoodList: React.FC<PropsGoodList> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <Good good={good} key={good} />\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}